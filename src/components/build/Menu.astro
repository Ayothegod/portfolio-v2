---
import { Icon } from "astro-icon/components";
import { mobileMenuIcons } from "../../lib/mobileMenu";
import Link from "../ui/Link.astro";
import { Button } from "../ui/button";
import { MenuToggle } from "@/components/build/build-ui/MenuToggle";
const currentUrl = Astro.url?.pathname;
---

<header class="sm:hidden flex justify-center">
  <div
    class="fixed inset-x-0 bottom-6 rounded-md max-w-full mx-4 p-3 bg-header dark:bg-header-dark backdrop-blur-lg"
  >
    <div class="grid grid-cols-6 gap-4 z-50 items-center">
      {
        mobileMenuIcons.map((menu) => (
          <Link
            href={menu.href}
            text={false}
            styles={`p-2 rounded-md text-2xl hover:bg-neutral-300 dark:hover:bg-neutral-900 ${currentUrl === menu.href && "bg-neutral-300 dark:bg-neutral-900"}`}
            icon={currentUrl === menu.href ? menu.activeIcon : menu.icon}
            iconPosition="left"
          />
        ))
      }
      <Button id="toggleButton" variant="ghost">
        <Icon name="icons/More - Outline" class="text-2xl" />
      </Button>
    </div>

    <div
      id="drawer"
      class="rounded-md fixed top-0 left-0 right-0 min-h-1/2 bg-[rgba(0,0,0,.1)] dark:bg-[rgba(0,0,0,.9)] dark:bg-opacity-0 shadow-lg transform -translate-y-full transition-transform duration-500 ease-in-out p-4 space-y-2 "
    >
      <a href="/stack">
        <Button variant="secondary" className="w-full">Tech Stack</Button>
      </a>
      <Button id="darkModeToggle" variant="secondary" className="w-full">
        Toggle Mode Hello</span>
      </Button>
    </div>

  </div>
</header>

<script>
  import {
    $toggleTheme,
    $applyTheme,
    $currentTheme,
    $setThemePreference,
  } from "../../store/theme";

  const themeToggleButton = document.getElementById("darkModeToggle");
  const html = document.querySelector("html");

  window.addEventListener("DOMContentLoaded", () => {
    const currentTheme = $currentTheme.get();
    console.log(currentTheme);

    if (currentTheme === null) {
      $setThemePreference("dark");
    }
    $applyTheme();
  });

  if (themeToggleButton) {
    themeToggleButton.addEventListener("click", () => {
      $toggleTheme();
    });
  }

  document
    .getElementById("toggleButton")
    ?.addEventListener("click", function () {
      var drawer = document.getElementById("drawer");
      if (drawer?.classList.contains("translate-y-48")) {
        drawer.classList.remove("translate-y-48");
        drawer.classList.add("-translate-y-full");
      } else {
        drawer?.classList.remove("-translate-y-full");
        drawer?.classList.add("translate-y-48");
      }
    });
</script>
